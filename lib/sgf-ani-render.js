// Generated by CoffeeScript 1.6.3
(function() {
  var SgfAniRender;

  SgfAniRender = (function() {
    function SgfAniRender(parentElement, url) {
      var FILE_SIGNATURE, INTEGER_BYTE_LENGTH, MAX_CANVAS_SIZE, amfLen, ba, fileSize, height, i, left, signature, top, width, yScroll, _i, _ref;
      this.url = url;
      if (!((parentElement != null) && (this.url != null))) {
        console.log("[sgf-ani-render::constructor] bad arguments, parentElement:" + parentElement + ", @url={@url}");
        return;
      }
      FILE_SIGNATURE = "SGF-asset";
      INTEGER_BYTE_LENGTH = 4;
      MAX_CANVAS_SIZE = 2048;
      ba = new BinFileReader(url);
      fileSize = ba.getFileSize();
      if (isNaN(fileSize) || fileSize <= 0) {
        console.log("[sgf-ani-render::constructor] fail to read image binary");
        return;
      }
      signature = ba.readString(FILE_SIGNATURE.length, fileSize - FILE_SIGNATURE.length);
      if (signature !== FILE_SIGNATURE) {
        console.log("[sgf-ani-render::constructor] invalid animation file");
        return;
      }
      ba.movePointer(-INTEGER_BYTE_LENGTH - FILE_SIGNATURE.length);
      amfLen = ba.readInt();
      ba.movePointer(-INTEGER_BYTE_LENGTH - amfLen);
      this.canvasWidth = ba.readShort();
      this.canvasHeight = ba.readShort();
      this.regPointX = ba.readShort();
      this.regPointY = ba.readShort();
      this.assetFrameNum = ba.readShort();
      if (this.canvasWidth > MAX_CANVAS_SIZE || this.canvasHeight > MAX_CANVAS_SIZE || this.assetFrameNum <= 0) {
        console.log("[sgf-ani-render::constructor] bad animation attrs, canvasWidth:" + this.canvasWidth + ", @canvasHeight:" + this.canvasHeight + ", @assetFrameNum:" + this.assetFrameNum);
        return;
      }
      this.assetRects = [];
      this.originalRects = [];
      yScroll = 0;
      for (i = _i = 0, _ref = this.assetFrameNum; _i < _ref; i = _i += 1) {
        left = ba.readShort();
        top = ba.readShort();
        width = ba.readShort();
        height = ba.readShort();
        this.originalRects.push({
          left: left,
          top: top,
          width: width,
          height: height
        });
        this.assetRects.push({
          left: 0,
          top: yScroll,
          width: width,
          height: height
        });
        yScroll += height;
      }
      console.log(this);
      this.paper = Raphael(parentElement, this.canvasWidth, this.canvasHeight);
      this.elBackgrond = this.paper.rect(0, 0, this.canvasWidth, this.canvasHeight);
      this.elBackgrond.attr("fill", "#f00");
      return;
    }

    SgfAniRender.prototype.toString = function() {
      return "[SgfAniRender url:" + this.url + "]";
    };

    return SgfAniRender;

  })();

  window.SgfAniRender = SgfAniRender;

}).call(this);
